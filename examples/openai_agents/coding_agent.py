"""Coding agent using OpenAI for code generation and analysis."""

import os
from typing import Dict, Any
from dotenv import load_dotenv

from a2a.server.agent_execution import AgentExecutor, RequestContext
from a2a.server.events import EventQueue
from a2a.types import Part, TextPart
from a2a.utils import new_agent_text_message
from typing_extensions import override

import openai

# Load environment variables
load_dotenv()


class CodingAgentExecutor(AgentExecutor):
    """Coding agent that specializes in code generation, debugging, and analysis."""
    
    def __init__(self):
        self.client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.model = "gpt-4o-mini"
        self.system_prompt = """
You are a Senior Software Engineer AI agent. Your expertise includes:

1. Code generation in multiple programming languages
2. Code debugging and error fixing
3. Code review and optimization
4. Algorithm design and implementation
5. Best practices and design patterns
6. Testing and documentation

Coding Commands you can handle:
- CODE:[language]:[description] - Generate code
- DEBUG:[code] - Debug and fix code issues
- REVIEW:[code] - Review code quality
- OPTIMIZE:[code] - Optimize code performance
- EXPLAIN:[code] - Explain how code works
- TEST:[code] - Generate unit tests

Always provide clean, well-commented, production-ready code with explanations.
        """
    
    @override
    async def execute(self, context: RequestContext, event_queue: EventQueue) -> None:
        message_content = ""
        for part in context.message.parts:
            if isinstance(part, Part) and isinstance(part.root, TextPart):
                message_content = part.root.text
                break
        
        try:
            # Parse command if it's a structured coding request
            if message_content.startswith("CODE:"):
                await self._handle_code_command(message_content, event_queue)
            elif message_content.startswith("DEBUG:"):
                await self._handle_debug_command(message_content, event_queue)
            elif message_content.startswith("REVIEW:"):
                await self._handle_review_command(message_content, event_queue)
            elif message_content.startswith("OPTIMIZE:"):
                await self._handle_optimize_command(message_content, event_queue)
            elif message_content.startswith("EXPLAIN:"):
                await self._handle_explain_command(message_content, event_queue)
            elif message_content.startswith("TEST:"):
                await self._handle_test_command(message_content, event_queue)
            else:
                # General coding request
                await self._handle_general_request(message_content, event_queue)
                
        except Exception as e:
            await event_queue.enqueue_event(
                new_agent_text_message(f"‚ùå Coding error: {str(e)}")
            )
    
    async def _handle_code_command(self, command: str, event_queue: EventQueue):
        """Handle CODE:language:description commands."""
        parts = command.split(":", 2)
        if len(parts) < 3:
            await event_queue.enqueue_event(
                new_agent_text_message("‚ùå Usage: CODE:language:description (e.g., CODE:python:sort algorithm)")
            )
            return
        
        language = parts[1]
        description = parts[2]
        
        prompt = f"Generate {language} code for: {description}. Include comments and explanations."
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.3
        )
        
        code = response.choices[0].message.content
        
        formatted_response = f"""
üíª Coding Agent - Code Generation
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîß Language: {language.title()}
üìã Task: {description}

{code}

‚úÖ Code generated by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    async def _handle_debug_command(self, command: str, event_queue: EventQueue):
        """Handle DEBUG:code commands."""
        code_to_debug = command.replace("DEBUG:", "", 1)
        
        prompt = f"Please debug the following code and fix any issues:\n\n{code_to_debug}"
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.2
        )
        
        debug_result = response.choices[0].message.content
        
        formatted_response = f"""
üêõ Coding Agent - Code Debugging
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîç Debug Analysis:
{debug_result}

‚úÖ Debugging completed by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    async def _handle_review_command(self, command: str, event_queue: EventQueue):
        """Handle REVIEW:code commands."""
        code_to_review = command.replace("REVIEW:", "", 1)
        
        prompt = f"Please review the following code for quality, best practices, and potential improvements:\n\n{code_to_review}"
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.3
        )
        
        review_result = response.choices[0].message.content
        
        formatted_response = f"""
üëÅÔ∏è Coding Agent - Code Review
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã Code Review Results:
{review_result}

‚úÖ Code review completed by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    async def _handle_optimize_command(self, command: str, event_queue: EventQueue):
        """Handle OPTIMIZE:code commands."""
        code_to_optimize = command.replace("OPTIMIZE:", "", 1)
        
        prompt = f"Please optimize the following code for better performance and efficiency:\n\n{code_to_optimize}"
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.3
        )
        
        optimized_result = response.choices[0].message.content
        
        formatted_response = f"""
‚ö° Coding Agent - Code Optimization
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üöÄ Optimization Results:
{optimized_result}

‚úÖ Code optimization completed by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    async def _handle_explain_command(self, command: str, event_queue: EventQueue):
        """Handle EXPLAIN:code commands."""
        code_to_explain = command.replace("EXPLAIN:", "", 1)
        
        prompt = f"Please explain how the following code works, step by step:\n\n{code_to_explain}"
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.4
        )
        
        explanation = response.choices[0].message.content
        
        formatted_response = f"""
üìö Coding Agent - Code Explanation
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Code Explanation:
{explanation}

‚úÖ Code explanation by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    async def _handle_test_command(self, command: str, event_queue: EventQueue):
        """Handle TEST:code commands."""
        code_to_test = command.replace("TEST:", "", 1)
        
        prompt = f"Please generate comprehensive unit tests for the following code:\n\n{code_to_test}"
        
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.3
        )
        
        tests = response.choices[0].message.content
        
        formatted_response = f"""
üß™ Coding Agent - Unit Tests
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî¨ Generated Unit Tests:
{tests}

‚úÖ Unit tests generated by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    async def _handle_general_request(self, message_content: str, event_queue: EventQueue):
        """Handle general coding requests."""
        response = self.client.chat.completions.create(
            model=self.model,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": f"Coding Request: {message_content}"}
            ],
            max_tokens=1500,
            temperature=0.4
        )
        
        content = response.choices[0].message.content
        
        formatted_response = f"""
üíª Coding Agent Response
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã Request: {message_content}

{content}

‚úÖ Response by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    @override
    async def cancel(self, context: RequestContext, event_queue: EventQueue) -> None:
        await event_queue.enqueue_event(new_agent_text_message("Coding task cancelled."))
